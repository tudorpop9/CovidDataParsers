package Symptom.Mapper;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;

import com.opencsv.CSVWriter;
import com.oracle.svm.core.annotate.Hybrid.Array;


public class App {
	

	public static void main(String[] args) throws IOException {
		
		BufferedReader input = null;
		BufferedWriter resultFile = null;
		TreeSet<String> allSymptoms = new TreeSet<String>();
		
		try {
			input = new BufferedReader(new FileReader("/home/tudor/Documents/eclipseWorkspace/SymptomsFilter/Symptoms.txt"));
			resultFile = new BufferedWriter(new FileWriter("/home/tudor/Documents/eclipseWorkspace/SymptomsFilter/formatedSymptoms.txt"));
		} catch (IOException e) {
			System.out.println("File creation exception found");
			e.printStackTrace();
		}
		
		///// File date processing 
		try {
			//Column name and stuff
			String inputString = input.readLine();
			//ColumnName
			resultFile.write(inputString + "\n");
			inputString = input.readLine();   /// first data line
			while(inputString != null ) {
				if(inputString.contains("Missing")) {
					resultFile.write("missing\n");
					allSymptoms.add("missing");
				}else {
				
					inputString = inputString.replaceAll("[{}\"]*", "");
					if(inputString.contains("Quantity")) {
						inputString = inputString.replaceAll("]", "");
						inputString = inputString.replaceAll("\\[", "");
						inputString = inputString.replaceAll("Quantity[0-9]+[.][0-9]*, DegreesCelsius", "");
						inputString = inputString.replaceAll("QuantityInterval[0-9]+, [0-9]+, DegreesCelsius", "");
						inputString = inputString.replaceAll(", ,", ",");
					}
					resultFile.write(inputString + '\n');
					
					//Pt simptomele unice
					for(String s : inputString.split(", ")) {
						allSymptoms.add(s);
					}
					
				}
				inputString = input.readLine();
				
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			input.close();
			resultFile.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Max 20k lini si 100 de coloane
		mapSymptoms(allSymptoms);
		
		
		
	}

	private static void mapSymptoms(TreeSet<String> allSymptoms) throws IOException {
		
		ArrayList<String> symptomsArray = new ArrayList<String>(allSymptoms);
		BufferedReader input = new BufferedReader(new FileReader("/home/tudor/Documents/eclipseWorkspace/Mapper/formatedSymptoms.txt"));
		CSVWriter csvWriter = new CSVWriter(new FileWriter("/home/tudor/Documents/eclipseWorkspace/Mapper/mappedSymptoms.csv"));
		//String[][] mappedSymptoms = new String[20000][100];
		List<String[]> mappedSymptoms = new ArrayList<String[]>();
		
		for(int i = 0;i<symptomsArray.size();i++) {
			mappedSymptoms.get(0)[i] = symptomsArray.get(i);
		}
		
		System.out.println(mappedSymptoms);
		
		input.close();
		csvWriter.close();
		
	}

}
